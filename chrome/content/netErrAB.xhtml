<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % htmlDTD PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % netErrorDTD SYSTEM "chrome://global/locale/netError.dtd">
  %netErrorDTD;
  <!ENTITY % ffDummyDTD SYSTEM "chrome://fierr/content/ffDummy.dtd">
  %ffDummyDTD;
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % localeDTD SYSTEM "chrome://fierr/locale/netError.dtd">
  %localeDTD;
]>
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta name="viewport" content="width=device-width; user-scalable=false;" /> 
  <title>&loadError.label;</title>
  <link rel="stylesheet" href="chrome://global/skin/netError.css" type="text/css" media="all" />
<style type="text/css">
<![CDATA[
#bgBox
{
 background-image: url(data:[IMAGE_BACKGROUND_MIME];base64,[IMAGE_BACKGROUND]) !important;
 background-position: 0px 64px !important;
 background-repeat: no-repeat !important;
 background-attachment: fixed !important;
 background-size: auto auto !important;
 min-height: 560px;
 position: absolute;
 top: 64px;
 left: 0;
 right: 0;
 z-index: -1;
}
h1
{
 border-bottom: 1px solid [COLOR_UNDERLINE];
}
#errorPageContainer
{
 background: [COLOR_BACKGROUND] no-repeat fixed;
 opacity: 0.65;
 padding: 10px;
 border: 2px solid;
 border-top-color: [COLOR_BORDER_TL];
 border-left-color: [COLOR_BORDER_TL];
 border-right-color: [COLOR_BORDER_BR];
 border-bottom-color: [COLOR_BORDER_BR];
 min-height: 0 !important;
}
#errorShortDesc > p
{
 border-bottom: 1px solid [COLOR_UNDERLINE];
 padding-bottom: 1em;
 white-space: pre-wrap;
}
#errorButtons
{
 width: 100%;
 display: flex;
}
#errorButtons > button
{
 display: inline-block !important;
 flex: 1;
 width: auto !important;
 margin-left: 2px;
 margin-right: 2px;
}
button img
{
 vertical-align: middle;
 padding-right: 3px;
}
#searchbox > input
{
 border: 1px solid transparent;
 border-top-color: [COLOR_BORDER_TL];
 border-left-color: [COLOR_BORDER_TL];
 border-right-color: [COLOR_BORDER_BR];
 border-bottom-color: [COLOR_BORDER_BR];
 margin-right: 2px;
}
]]>
</style>
 <link rel="icon" type="image/png" id="favicon" sizes="64x64" href="chrome://browser/skin/images/errorpage-warning.png"/>
 <script type="application/x-javascript">
  var localeFierr =
  {
   errStopReload: "&errStopReload.label;",
   errReloading:  "&errReloading.label;"
  };<![CDATA[
var Fierr_PageScript =
{
 _DefaultTime: 10,
 _TimerID: 0,
 _Seconds: 0,
 _errStopReload: localeFierr.errStopReload,
 _errReloading: localeFierr.errReloading,
 _getErrorCode: function()
 {
  var url = document.documentURI;
  var error = url.search(/e\=/);
  var duffUrl = url.search(/\&u\=/);
  return decodeURIComponent(url.slice(error + 2, duffUrl));
 },
 _getCSSClass: function()
 {
  var url = document.documentURI;
  var matches = url.match(/s\=([^&]+)\&/);
  if (!matches || matches.length < 2)
   return "";
  return decodeURIComponent(matches[1]);
 },
 _getOriginalPage: function(noEnd)
 {
  var location = window.content.location.href;
  if (noEnd==true)
  {
   var parts = location.split("#");
   return parts[0];
  }
  else
  {
   return location;
  }
 },
 reloadPage: function()
 {
  Fierr_PageScript.stopReload();
  try
  {
   location.reload();
  }
  catch (e)
  {
  }
 },
 stopReload: function()
 {
  var cmdStop = document.getElementById("tryStop");
  if (cmdStop)
  {
   clearTimeout(Fierr_PageScript._TimerID);
   cmdStop.parentNode.removeChild(cmdStop);
   Fierr_PageScript._Seconds = Fierr_PageScript._DefaultTime;
  }
 },
 backPage: function()
 {
  Fierr_PageScript.stopReload();
  history.back();
 },
 googlePage: function()
 {
  Fierr_PageScript.stopReload();
  window.content.location.href = "http://www.google.com/search?q=" + Fierr_PageScript._getOriginalPage(false);
 },
 _getDescription: function()
 {
  var url = document.documentURI;
  var desc = url.search(/d\=/);
  if (desc == -1)
   return "";
  return decodeURIComponent(url.slice(desc + 2));
 },
 initPage: function()
 {
  var err = Fierr_PageScript._getErrorCode();
  var errTitle = document.getElementById("et_" + err);
  var errDesc  = document.getElementById("ed_" + err);
  if (!errTitle || !errDesc)
  {
   errTitle = document.getElementById("et_generic");
   errDesc  = document.getElementById("ed_generic");
  }
  var title = document.getElementsByClassName("errorTitleText")[0];
  if (title)
  {
   title.parentNode.replaceChild(errTitle, title);
   errTitle.classList.add("errorTitleText");
  }
  var sd = document.getElementById("errorShortDescText");
  if (sd)
   sd.textContent = Fierr_PageScript._getDescription();
  var ld = document.getElementById("errorLongDesc");
  if (ld)
  {
   ld.parentNode.replaceChild(errDesc, ld);
   errDesc.id = "errorLongDesc";
  }
  Fierr_PageScript._Seconds = Fierr_PageScript._DefaultTime;
  var cmdStop = document.getElementById("tryStop");
  var lblStop = document.getElementById("lblStop");
  if(err == "connectionFailure" || err == "netTimeout" ||
     err == "netReset" || err == "netInterrupt" ||
     err == "proxyResolveFailure" || err == "proxyConnectFailure" ||
     err == "dnsNotFound")
  {
   lblStop.textContent = Fierr_PageScript._errStopReload + " (" + Fierr_PageScript._Seconds + ")";
   Fierr_PageScript._TimerID = setTimeout(Fierr_PageScript.UpdateTimer, 1000);
  }
  else
  {
   cmdStop.parentNode.removeChild(cmdStop);
  }
  var errContainer = document.getElementById("errorContainer");
  errContainer.parentNode.removeChild(errContainer);
  var className = Fierr_PageScript._getCSSClass();
  if (className && className != "expertBadCert")
  {
   document.documentElement.className = className;
   var favicon = document.getElementById("favicon");
   var faviconParent = favicon.parentNode;
   faviconParent.removeChild(favicon);
   favicon.setAttribute("href", "chrome://global/skin/icons/" + className + "_favicon.png");
   faviconParent.appendChild(favicon);
  }
  if (className == "expertBadCert")
  {
   Fierr_PageScript.showSecuritySection();
  }
  if (err == "remoteXUL")
  {
   document.getElementById("errorButtons").style.display = "none";
  }
  if (err == "cspFrameAncestorBlocked")
  {
   document.getElementById("errorButtons").style.display = "none";
  }
  if (err == "nssBadCert")
  {
   document.getElementById("errorButtons").style.display = "none";
   document.getElementById("errorPage").setAttribute("class", "certerror");
   Fierr_PageScript._addDomainErrorLink();
  }
  else
  {
   var secOverride = document.getElementById("securityOverrideDiv");
   secOverride.parentNode.removeChild(secOverride);
  }
  var wifiButton = document.getElementById("wifi");
  if (wifiButton)
  {
   wifiButton.insertAdjacentHTML('afterbegin', '<img src="data:[IMAGE_BUTTON_GO_ONLINE_MIME];base64,[IMAGE_BUTTON_GO_ONLINE]" />');
  } 
  var searchButton = document.getElementById("searchbutton");
  if (searchButton)
  {
   searchButton.insertAdjacentHTML('afterbegin', '<img src="data:[IMAGE_BUTTON_SEARCH_MIME];base64,[IMAGE_BUTTON_SEARCH]" />');
  }
 },
 showSecuritySection: function()
 {
  document.getElementById('securityOverrideContent').style.display = '';
  document.getElementById('securityOverrideLink').style.display = 'none';
 },
 _addDomainErrorLink: function()
 {
  var sd = document.getElementById("errorShortDescText");
  if (sd)
  {
   var desc = Fierr_PageScript._getDescription();
   var re = /<a id="cert_domain_link" title="([^"]+)">/;
   var result = re.exec(desc);
   if (!result)
    return;
   sd.textContent = "";
   sd.appendChild(document.createTextNode(desc.slice(0, result.index)));
   var anchorEl = document.createElement("a");
   anchorEl.setAttribute("id", "cert_domain_link");
   anchorEl.setAttribute("title", result[1]);
   anchorEl.appendChild(document.createTextNode(result[1]));
   sd.appendChild(anchorEl);
   sd.appendChild(document.createTextNode(desc.slice(desc.indexOf("</a>") + "</a>".length)));
  }
  var link = document.getElementById('cert_domain_link');
  if (!link)
   return;
  var okHost = link.getAttribute("title");
  var thisHost = document.location.hostname;
  var proto = document.location.protocol;
  okHost = okHost.replace(/^\*\./, "www.");
  if (Fierr_PageScript._endsWith(okHost, "." + thisHost))
   link.href = proto + okHost;
  if (Fierr_PageScript._endsWith(thisHost, "." + okHost))
   link.href = proto + okHost;
 },
 _endsWith: function(haystack, needle)
 {
  return haystack.slice(-needle.length) == needle;
 },
 UpdateTimer: function()
 {
  if (Fierr_PageScript._TimerID) 
  { 
   clearTimeout(Fierr_PageScript._TimerID); 
   Fierr_PageScript._TimerID = 0; 
  }
  Fierr_PageScript._Seconds--;
  var cmdStop = document.getElementById("tryStop");
  var lblStop = document.getElementById("lblStop");
  if (Fierr_PageScript._Seconds == 0)
  {
   lblStop.textContent = Fierr_PageScript._errReloading;
   cmdStop.disabled = true;
   Fierr_PageScript._Seconds = Fierr_PageScript._DefaultTime;
   Fierr_PageScript.reloadPage();
  }
  else
  {
   cmdStop.disabled = false;
   lblStop.textContent = Fierr_PageScript._errStopReload + " (" + Fierr_PageScript._Seconds + ")";
   Fierr_PageScript._TimerID = setTimeout(Fierr_PageScript.UpdateTimer, 1000);
  }
 }
};
 ]]></script>
 </head>
 <body id="errorPage" dir="&locale.dir;">
  <div id="errorContainer">
   <div id="errorTitlesContainer">
    <h1 id="et_generic">&generic.title;</h1>
    <h1 id="et_dnsNotFound">&dnsNotFound.title;</h1>
    <h1 id="et_fileNotFound">&fileNotFound.title;</h1>
    <h1 id="et_malformedURI">&malformedURI.title;</h1>
    <h1 id="et_protocolNotFound">&protocolNotFound.title;</h1>
    <h1 id="et_unknownProtocolFound">&unknownProtocolFound.title;</h1>
    <h1 id="et_connectionFailure">&connectionFailure.title;</h1>
    <h1 id="et_netTimeout">&netTimeout.title;</h1>
    <h1 id="et_redirectLoop">&redirectLoop.title;</h1>
    <h1 id="et_unknownSocketType">&unknownSocketType.title;</h1>
    <h1 id="et_netReset">&netReset.title;</h1>
    <h1 id="et_notCached">&notCached.title;</h1>
    <h1 id="et_netOffline">&netOffline.title;</h1>
    <h1 id="et_netInterrupt">&netInterrupt.title;</h1>
    <h1 id="et_deniedPortAccess">&deniedPortAccess.title;</h1>
    <h1 id="et_proxyResolveFailure">&proxyResolveFailure.title;</h1>
    <h1 id="et_proxyConnectFailure">&proxyConnectFailure.title;</h1>
    <h1 id="et_contentEncodingError">&contentEncodingError.title;</h1>
    <h1 id="et_unsafeContentType">&unsafeContentType.title;</h1>
    <h1 id="et_nssFailure2">&nssFailure2.title;</h1>
    <h1 id="et_nssBadCert">&nssBadCert.title;</h1>
    <h1 id="et_cspFrameAncestorBlocked">&cspFrameAncestorBlocked.title;</h1>
    <h1 id="et_remoteXUL">&remoteXUL.title;</h1>
    <h1 id="et_corruptedContentError">&corruptedContentError.title;</h1>
   </div>
   <div id="errorDescriptionsContainer">
    <div id="ed_generic">&generic.longDesc;</div>
    <div id="ed_dnsNotFound">&dnsNotFound.longDesc2;&dnsNotFound.longDesc3;&dnsNotFound.longDesc4;</div>
    <div id="ed_fileNotFound">&fileNotFound.longDesc;</div>
    <div id="ed_malformedURI">&malformedURI.longDesc;&malformedURI.longDesc2;</div>
    <div id="ed_unknownProtocolFound">&unknownProtocolFound.longDesc;</div>
    <div id="ed_protocolNotFound">&protocolNotFound.longDesc;</div>
    <div id="ed_connectionFailure">&connectionFailure.longDesc;&connectionFailure.longDesc2;</div>
    <div id="ed_netTimeout">&netTimeout.longDesc;&netTimeout.longDesc2;</div>
    <div id="ed_redirectLoop">&redirectLoop.longDesc;</div>
    <div id="ed_unknownSocketType">&unknownSocketType.longDesc;</div>
    <div id="ed_netReset">&netReset.longDesc;&netReset.longDesc2;&netReset.longDesc3;</div>
    <div id="ed_notCached">&notCached.longDesc;</div>
    <div id="ed_netOffline">&netOffline.longDesc2;&netOffline.longDesc3;</div>
    <div id="ed_netInterrupt">&netInterrupt.longDesc;&netInterrupt.longDesc2;&netInterrupt.longDesc3;</div>
    <div id="ed_deniedPortAccess">&deniedPortAccess.longDesc;</div>
    <div id="ed_proxyResolveFailure">&proxyResolveFailure.longDesc2;&proxyResolveFailure.longDesc3;</div>
    <div id="ed_proxyConnectFailure">&proxyConnectFailure.longDesc;</div>
    <div id="ed_contentEncodingError">&contentEncodingError.longDesc;</div>
    <div id="ed_unsafeContentType">&unsafeContentType.longDesc;</div>
    <div id="ed_nssFailure2">&nssFailure2.longDesc;</div>
    <div id="ed_nssBadCert">&nssBadCert.longDesc2;</div>
    <div id="ed_cspFrameAncestorBlocked">&cspFrameAncestorBlocked.longDesc;</div>
    <div id="ed_remoteXUL">&remoteXUL.longDesc;</div>
    <div id="ed_corruptedContentError">&corruptedContentError.longDesc;</div>
   </div>
  </div>
  <div id="errorPageContainer">
   <div id="errorTitle">
    <h1 class="errorTitleText" />
   </div>
   <div id="errorLongContent">
    <div id="errorShortDesc">
     <p id="errorShortDescText" />
    </div>
    <div id="errorLongDesc" />
    <div id="securityOverrideDiv">
     <a id="securityOverrideLink" href="javascript:Fierr_PageScript.showSecuritySection();">&securityOverride.linkText;</a>
     <div id="securityOverrideContent" style="display: none;">&securityOverride.warningContent;</div>
    </div>
   </div>
   <div id="errorButtons">
    <button type="button" id="tryBack"   onclick="Fierr_PageScript.backPage();"><img src="data:[IMAGE_BUTTON_BACK_MIME];base64,[IMAGE_BUTTON_BACK]" alt="" title="&errBack.label;" />&errBack.label;</button>
    <button type="button" id="tryAgain"  onclick="Fierr_PageScript.reloadPage();"><img src="data:[IMAGE_BUTTON_RELOAD_MIME];base64,[IMAGE_BUTTON_RELOAD]" alt="" title="&errReload.label;" />&errReload.label;</button>
    <button type="button" id="tryStop"   onclick="Fierr_PageScript.stopReload();"><img src="data:[IMAGE_BUTTON_STOP_RELOAD_MIME];base64,[IMAGE_BUTTON_STOP_RELOAD]" alt="" title="&errStopReload.label;" /><span id="lblStop">&errStopReload.label;</span></button>
   </div>
  </div>
  <div id="bgBox"></div>
  <script type="application/x-javascript">Fierr_PageScript.initPage();</script>
 </body>
</html>
